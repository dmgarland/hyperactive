<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="de">
<head>
<title>AnimationPackage</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<link href="ap_style.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript">
<!--
function MM_reloadPage(init) {  //reloads the window if Nav4 resized
  if (init==true) with (navigator) {if ((appName=="Netscape")&&(parseInt(appVersion)==4)) {
    document.MM_pgW=innerWidth; document.MM_pgH=innerHeight; onresize=MM_reloadPage; }}
  else if (innerWidth!=document.MM_pgW || innerHeight!=document.MM_pgH) location.reload();
}
MM_reloadPage(true);
//-->
</script>
<style type="text/css">
<!--
.Stil3 {color: #666699}
-->
</style>
</head>
<body>
<div id="logo">
	<p><a href="http://www.alex-uhlmann.de/flash/animationpackage/"><img src="images/logo_ap_framed.gif" alt="AnimationPackage" width="324" height="94" style="border:0"/></a></p>
</div>
<div id="navigation">
  <p class="button">v2.00</p>
  <p class="button"><a href="index.htm">index</a></p>
  <p class="button"><a href="readme.htm">readme</a></p>
  <p class="button"><a href="support.htm">support</a></p>
  <p class="button"><a href="history.htm">history</a></p>
  <p class="button"><a href="license.htm">terms of use</a></p>
  <p class="button"><a href="download.htm">download</a></p>
<form action="https://www.paypal.com/cgi-bin/webscr" method="post">
<p><input type="hidden" name="cmd" value="_s-xclick" /></p>
<p><input type="image" src="https://www.paypal.com/en_US/i/btn/x-click-but21.gif" style="border:0" name="submit" alt="Make payments with PayPal - it's fast, free and secure!" /></p>
<p><input type="hidden" name="encrypted" value="-----BEGIN PKCS7-----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-----END PKCS7-----
" /></p>
</form>
  <p><a href="http://sourceforge.net"><img src="http://sourceforge.net/sflogo.php?group_id=116992&amp;type=1" width="88" height="31" alt="SourceForge.net Logo" style="border:0" /></a></p>
  <p><a href="http://validator.w3.org/check/referer"><img src="http://www.w3.org/Icons/valid-xhtml10" alt="Valid XHTML 1.0!" height="31" width="88" style="border:0" /></a></p>
  <p><a href="http://jigsaw.w3.org/css-validator/"><img src="http://jigsaw.w3.org/css-validator/images/vcss" alt="Valid CSS!" style="border:0;width:88px;height:31px" /></a></p>
  <p><a href="http://www.mtasc.org"><img src="http://www.mtasc.org/img/mtasc_88x31.gif" alt="Compiled with MTASC" style="border:0"/></a></p>
</div>
<div id="content"> 
  <p>&nbsp;</p>
   <p class="heading">Introduction</p>
  <p>AnimationPackage helps you to create powerful, maintainable animations and primitive shapes in an efficient and easy way. At the same time it keeps your file size down because many parts of it are reused and only the classes you need are imported to your project. AnimationPackage 2 is an ActionScript 2.0 library and it is compatible to Flash Player 8 and above.</p>
  <p class="heading">Credits</p>
  <p>First of all, I want to  thank  the following people, whose ideas and code greatly influenced AnimationPackage. Without their contributions to the Flash community, AnimationPackage would not have been possible.</p>
 
  <table cellspacing="0" cellpadding="0">
    <tr>
      <td align="left" valign="top"><span class="link"><a href="http://www.robertpenner.com/">Robert Penner</a></span></td>
      <td valign="top"><span>AS2 Easing Equations<br />
      Color Toolkit<br />
      cubic bezier drawing</span></td>
    </tr>
    <tr>
      <td valign="top"><span class="link"><a href="http://www.ricewing.com/">Ric Ewing</a></span><br/>
<span>Eric Mueller<br/>
Michael Hurwicz<br/>
James W. Bennett</span></td>
      <td align="left" valign="top"><span>Drawing methods</span></td>
    </tr>
	<tr>
      <td valign="top"><span class="link"><a href="http://www.andre-michelle.com/">Andr&eacute; Michelle</a></span></td>
	  <td valign="top"><span>ImpulsDispatcher<br />
      FrameBasedInterval</span>      </td>
    </tr>
    <tr>
      <td valign="top"><span class="link"><a href="http://www.gskinner.com/">Grant Skinner</a></span></td>
      <td valign="top"><span>GDispatcher</span></td>
    </tr>
    <tr>
      <td valign="top"><span class="link"><a href="http://www.sharedfonts.com">Ivan Dembicki</a></span></td>
      <td valign="top"><span>com.sharedfonts.Path<br />
      skew (class)</span></td>
    </tr>
    <tr>
      <td valign="top"><span class="link"><a href="http://www.person13.com/ascblibrary/">Joey Lott</a></span></td>
      <td valign="top"><span>ASCBLibrary</span></td>
    </tr>
    <tr>
      <td valign="top"><span>e2e4<br/>
      i++ </span></td>
      <td valign="top"><span>SuperShape Flash implementation </span></td>
    </tr>
    <tr>
      <td valign="top"><span class="link"><a href="http://www.marcelfahle.com">Marcel Fahle</a></span></td>
      <td valign="top"><span>Color Dodge methods</span></td>
    </tr>
    <tr>
      <td valign="top"><span class="link"><a href="http://www.helpqlodhelp.com/blog">Ralf Bokelberg</a></span></td>
      <td valign="top"><span>MovieClip.blur</span></td>
    </tr>
    <tr>
      <td valign="top"><span class="link"><a href="http://www.moock.org/blog">Colin Moock</a></span>
      </td>
      <td valign="top"><span>combineRGB()</span></td>
    </tr>
    <tr>
      <td valign="top"><span class="link"><a href="http://blog.funciton.com/en/index.php">Fernando Fl&oacute;rez</a></span></td>
      <td valign="top"><span>MovieClip.getNextDepth </span></td>
    </tr>
    <tr>
      <td valign="top"><span class="link"><a href="http://www.yestoall.com/flashAPI/index.html">Nacho Rapallo</a></span><br/>          
         <span class="link"><a href="http://www.actionscript.cl/">Andres Sebastian Ya&ntilde;ez Duran</a></span>
      </td>
      <td valign="top"><span> 
        [flashAPI] skew.as</span>
      </td>
    </tr>
    <tr>
      <td valign="top"><span>crazyl0rd @ EFnet</span></td>
      <td valign="top"><span>MovieClip.shake</span></td>
    </tr>
    <tr>
      <td valign="top"><span class="link"><a href="http://blog.klaustrofobik.org/">Tanja Pislar</a></span>
      </td>
      <td valign="top"><span>AS2DocGenerator</span></td>
    </tr>
    <tr>
      <td valign="top"><span>Manfred Hiel</span></td>
      <td valign="top"><span>Logo Design</span></td>
    </tr>
    <tr>
      <td valign="top"><span>Karl Friedrich Gau&szlig;</span></td>
      <td valign="top"><span>mathematical foundations for Easing Equations</span></td>
    </tr>
  </table>
  <p>and the people who gave valuable feedback during the BETA stage, later on, and who helped spreading the news: <span class="link"><a href="http://www.moock.org/blog">Colin Moock</a>, <a href="http://www.helpqlodhelp.com/blog">Ralf Bokelberg</a>, <a href="http://www.andre-michelle.com/">Andr&eacute; Michelle</a>, <a href="http://www.asnative.de/">Ralf Siegel</a></span>, Martin 
  

  Heidegger (<span class="link"><a href="http://www.as2lib.org/">as2lib</a></span>), <span class="link"><a href="http://www.flashstar.de">Matthias Kannengiesser</a>, <a href="http://www.sharedfonts.com">Ivan Dembicki</a>, <a href="http://www.marcelfahle.com">Marcel Fahle</a>, <a href="http://www.flashyok.net/kiroukou/">Thomas Pfeiffer</a>, <a href="http://www.gruden.com">Matt Freer</a></span>, <span class="link"><a href="http://www.markme.com/mesh">Steve Schwarz</a></span>, <span class="link"><a href="http://www.markme.com/mesh">Mike Chambers</a></span>, <span class="link"><a href="http://www.werk3at.com">Christoph Atteneder</a></span>, <span class="link"><a href="http://www.neue-digitale.de/">NEUE DIGITALE</a></span>, <span class="link"><a href="http://www.incomumdesign.com">Ben Jackson</a></span> and the <span class="link"><a href="http://www.powerflasher.de">Powerflashers</a></span>. Did I forgot anybody?</p>
  <p class="heading">Requirements</p>
  <p>You need to have either Macromedia Flash MX 2004  or Macromedia Flex 1.0 or higher installed and the Flash Player 6 to view the results. Nevertheless, you can compile AnimationPackage with <span class="link"><a href="http://www.mtasc.org/">Motion-Twin ActionScript 2 Compiler</a></span>.</p>
  <p class="heading">Overview</p>
  <p>Before reading the <span class="heading">usage</span> paragraph, I recommend taking a look at the <span class="link"><a href="tutorial.htm">step by step tutorial</a></span> that shows you how simple it is to create animations with AnimationPackage. After reading the <span class="heading">usage</span> paragraph, check out the documentation for the class you are interested in. Each class that is provided for you, has its own documentation HTML file. Also, I recommend to look into the APCore, AnimationCore, and Shape class documentations which are base classes for many classes you might use.</p>
    <p class="heading">Usage</p>
    <p class="subtitle">Structure</p>
    <p>Most classes in AnimationPackage that can animate, implement the IAnimatable interface. The IAnimatable interface makes sure that certain functionality is shared across all classes that support IAnimatable. In particular, IAnimatable classes in AnimationPackage directly implement either ISingleAnimatable or IMultiAnimatable which extend IAnimatable. IAnimatable extends IAnimationPackage. Take look into the interfaces to get an understanding what functionality AnimationPackage offers and see the HTML class documentation for further information about implementation. Also note that empty parameter lists indicate that this method is overloaded and explained in the HTML class documentation. If a method doesn't accept parameters, the parameter list is Void. All interfaces start with an &quot;I&quot;.</p>
    <p>For example there is also IDrawable for all shapes or IOutline for Drawer, Line, DashLine, QuadCurve, CurbicCurve, Curve etc. </p>
    <p>At the moment only the source code tells which interfaces a class implements. Therefore, here is a list of all IAnimatable classes because I sometimes refer to them when talking about types of classes:</p>
    <p class="code">Animation, Sequence, Parallel, Move, MoveOnCubicCurve, MoveOnCurve, MoveOnPath, MoveOnQuadCurve, Scale, Rotation, Alpha,   ColorTransform, ColorBrightness,  ColorNegative, ColorDodge, MaskMoveFX, MaskScaleFX, Skew, Timeline, Volume, Drawer, Line, DashLine, QuadCurve, CurbicCurve, Curve,    Arc, Spiral, SuperShape, Animator, SingleAnimator, Pause.</p>
    <p>Also, sometimes I refer to composite classes. Those are collection classes that implement the Composite design pattern and IComposite marker interface to treat their children or other collections. Those classes are: </p>
    <p class="code">Animation, Sequence, Parallel, Drawer, MoveOnPath, ShapeComposite.</p>
    <p>The IDrawable interface describes most shape classes.</p>
    <p class="code">Arc, Burst, Ellipse, Gear, Poly, Rectangle, RoundRectangle, ShapeComposite, Spiral, Star, Line, DashLine, QuadCurve, CurbicCurve, Curve.</p>
    <p>IOutline classes are outlines that can be combinded in the composite Drawer class to draw, animate and fill drawings of arbitrary shape.</p>
    <p><span class="code">Drawer, Line, DashLine, QuadCurve, CurbicCurve, Curve.</span></p>
    <p>&nbsp; </p>
    <p class="subtitle">Tween-engine</p>
  <p>There are two different ways in Flash to create animations (tweening) with ActionScript. Either based on frames (onEnterFrame)  or based on time (setInterval). In general, frame-based tweening is more accurate and faster than time-based tweening but forces you to  specify frames for duration instead of time (i.e. milliseconds). For the latter AnimationPackage offers a workaround, though.</p>
  <p>AnimationPackage can use both approaches, time-based tweening or frame-based tweening. By default, it uses a time-based tween engine. For frame-based tweening a tween-engine based on Andr&eacute; Michelle's ImpulsDispatcher can be used, instead.</p>
  <p>You can change the tween-engines at runtime, on all instances at once or separately on single instances and control frame based animations with milliseconds. For more information about the tween-engines in AnimationPackage, please take a look at the AnimationCore class documentation and on an IAnimatable class documentation you want to use.</p>
  <p class="subtitle">Default properties </p>
  <p>The AnimationCore, Shape and most drawing classes have default properties. This means if you don't specify a property to the instance, the default property is used. You can make use 
of this if you have i.e. different classes that might want to share some 
properties. Then, you can overwrite the default property and don't specify anything to the instance, so that the instance retrieves your default property. All default properties 
belong to a class (they are static) and have the same name like their instance 
properties, except for the suffix "_def" for default. See the AnimationCore, Shape  and drawing class documentations for information on what default properties are available and examples. </p>
  <p><span class="subtitle">APCore class </span></p>
  <p>Most classes in AnimationPackage subclass APCore. It implements listener functionality (AsBroadcaster and EventDispatcher/GDispatcher) and common used methods and creates the animationClip (apContainer_mc), by default to the _root timeline, which is a movieclip that contains everything made by AnimationPackage unless you explicitly prevent this. For example if you use the classes of de.alex_uhlmann.animationpackage.drawing you are able to specify a movieclip of any timeline that will be used to draw the shape. If you don't specify anything, a new movieclip, by default created in _root.apContainer_mc will be used to draw the shape. Furthermore, for better performance any frame-based tweening will run on the same onEnterFrame handler in apContainer_mc. See AnimationCore class documentation for more information. </p>
  <p class="subtitle"><span><a name="event_handling" id="event_handling"></a>Event H</span>andling</p>
  <p>You don't have to use a callback structure to handle events like I did in the tutorial. AnimationPackage supports com.gskinner.events.GDispatcher, which is an extension to the <span class="link"><a href="http://www.w3.org/TR/DOM-Level-3-Events/">W3C standard</a></span> orientated mx.events.EventDispatcher from Macromedia. You can use GDispatcher exactly like EventDispatcher but you have additional features in GDispatcher. Take a look at <span class="link"><a href="http://www.gskinner.com/blog/archives/000027.html">Grant Skinner's documentation on GDispacher</a></span> for more information. Nevertheless, if you want to work with EventDispatcher instead of GDispatcher, take a look at the APCore class implementation comment at  line 2 for how to switch. It's just swopping two lines of code. In the following, I'll call this event mechanism EventDispatcher, even if AnimationPackage uses GDispatcher by default. If GDispatcher specific features will be used, I'll say so.</p>
  <p>Most classes have an &quot;onStart&quot; and &quot;onEnd&quot; event, and many classes have an &quot;onUpdate&quot; event, in addition. Take a look at the  specific class documentation for more information about specific events of one class. In the following, I'll demonstrate the distinction between using the callback structure and using some different implementations of EventDispatcher / GDispatcher. The examples will always do the same. I'll decrease a rectangle, drawn with AnimationPackage.</p>
  <p>&nbsp;</p>
  <p>Example 1: draw and animate a rectangle using the callback structure:</p>
  <p>&nbsp;</p>

<blockquote>
<pre class="code">

APCore.initialize();
var myListener:Object = new Object();
APCore.addListener(myListener);

var myRectangle:Rectangle = new Rectangle(275,200);
myRectangle.draw();
var myScale:Scale = new Scale(myRectangle.movieclip,50,50);
myScale.animationStyle(2000,Sine.easeInOut,"onCallback");

myListener.onCallback = function(source, value) {
	trace(source+" finished at "+value);
};
myScale.animate(0,100);
</pre>
</blockquote>  

     
	 
	 
  
 
 
 
 
 
  <p>&nbsp;</p>
  <p>There's another example using the callback structure in the APCore class documenation. </p>
  <p>Example 2: do the same but use EventDispatcher. Note that we don't need the first two lines  and the callback property of animationStyle() from example 1. We create the listener object obj, and subscribe it to the onEnd event of the myScale instance.</p>
  <p>&nbsp;</p>
  <blockquote>
<pre class="code">
var myRectangle:Rectangle = new Rectangle(275,200);
myRectangle.draw();
var myScale:Scale = new Scale(myRectangle.movieclip,50,50);
myScale.animationStyle(2000,Sine.easeOut);


var obj:Object = new Object();
obj.onEnd = function(eventObject:Object) {
	trace(eventObject.target+" finished at "+eventObject.value);		
};
myScale.addEventListener("onEnd",obj);
myScale.animate(0,100);
</pre>
</blockquote>  
  <p>&nbsp;</p>
  <p><span>Example 3: do the same as in example 2 but use the current timeline (this) for the subscriber object.</span></p>
  <p>&nbsp;</p>
 <blockquote>
<pre class="code">
var myRectangle:Rectangle = new Rectangle(275,200);
myRectangle.draw();
var myScale:Scale = new Scale(myRectangle.movieclip,50,50);
myScale.animationStyle(2000,Sine.easeOut);


function onEnd(eventObject:Object) {
	trace(eventObject.target+" finished at "+eventObject.value);	
}
myScale.addEventListener("onEnd",this);
myScale.animate(0,100);
</pre>
</blockquote>  
  <p>&nbsp;</p>
  <p><span>Example 4: do the same as in example 3 but send a GDispacher specific third parameter with addEventListener(). This third parameter is a handler method, I've defined in &quot;this&quot; timline. </span></p>
  <p>&nbsp;</p>
 <blockquote>
<pre class="code">
var myRectangle:Rectangle = new Rectangle(275,200);
myRectangle.draw();
var myScale:Scale = new Scale(myRectangle.movieclip,50,50);
myScale.animationStyle(2000,Sine.easeOut);


function onRectangleReduction(eventObject:Object) {
	trace(eventObject.target+" finished at "+eventObject.value);	
}
myScale.addEventListener("onEnd",this,"onRectangleReduction");
myScale.animate(0,100);
</pre>
</blockquote>  
  <p>&nbsp;</p>
  <p>The EventDispatcher always sends an event object to the subscriber object. The event object has at least two properties: &quot;type&quot;, which specifies the event subscribed to, and &quot;target&quot;, which specifies the event source. The event object can contain more properties like the &quot;value&quot; property, used in the examples above. To see what properties are sent to the subscriber object you can use a for in loop:</p>
  <p>&nbsp;</p>
  <blockquote>
<pre class="code">

for(var p:String in eventObject) {
	trace(p+" : "+eventObject[p])
}
</pre>
</blockquote> 
  <p>&nbsp;</p>
  <p>Or take a look into the class documentation.</p>
  <p class="subtitle">&nbsp;</p>
  <p class="subtitle"><a name="custom_ease" id="custom_ease">Customizable easing equations</a></p>
  <p>Easing equations can be used to customize your animations. You can use the provided easing equations from <span class="link"><a href="http://www.robertpenner.com/easing">Robert Penner</a></span>. You can build your own easing equation with the help of easing generators from <span class="link"><a href="http://laco.wz.cz/tween/?page=customeasing">Ladislav Zigo</a></span> or <span class="link"><a href="http://timotheegroleau.com/Flash/experiments/easing_function_generator.htm">Timothee Groleau</a></span>. Those generators also make sure that your customized easing equations are compatible to the tween engines used by AnimationPackage. Nevertheless, every easing equation can have additional parameters. At this time, Robert Penner's Elastic and Back easing equations support additional parameters to further customize the Elastic and Back tweening. Here is one example of a rotation using AnimationPackage's Rotation class and Robert Penner's Back easing equation. The first example uses the default Back easing. The second example uses a customized Back easing that specifies the amount of overshoot. Also see the animationStyle documentations for more information.</p>
  <p>default Back easing:</p>
  <p class="code">var myRotation1:Rotation = new Rotation(mc1);<br />
  myRotation1.animationStyle(2000,Back.easeOut);<br />
  myRotation1.run(360);</p>
  <p>customized Back easing:</p>
  <p class="code">var myRotation2:Rotation = new Rotation(mc2);<br />
  myRotation2.animationStyle(2000,[Back.easeOut,4]);<br />
  myRotation2.run(360);</p>
  <p>See it in aciton: <span class="link"><a href="customized_easing_sample.html">Example .swf</a></span>.</p>
  <p>&nbsp;</p>
  <p class="subtitle"><a name="flex" id="flex"></a>Flex support</p>
  <p>You can use AnimationPackage in <span class="link"><a href="http://www.macromedia.com/software/flex/">Macromedia Flex</a></span>. Currently, it's indended to use AnimationPackage in ActionScript 2.0 classes or the MXML Script tag.</p>
  <p>&nbsp;</p>
  <p class="subtitle"><a name="controlling" id="controlling"></a>Controlling  animations.</p>
  <p>AnimationPackage offers full controll over any IAnimatable instance. You can animate, animate only certain areas, animate backwards, stop, pause, resume, goto specific points  withough animating, step forward, step backward etc. The following example is build to showcase the control that AnimationPackage offers over animations. For further information about usage please check the class documentation of the class you're interested in.</p>
  <p class="link"><a href="controller.html">Controlling animations showcase</a></p>
  <p>&nbsp;</p>
  <p>Thanks for following me. Have  a better example? Found bugs? Let me know.<br />
  <span class="link"><a
href="mailto:mailX@XalexX-uhlmann.de">mailX@XalexX-uhlmann.de</a></span> . Remove the X's.</p>
</div>

<div id="script">
  <p>creating powerful animations fast.</p>
</div>

</body>
</html>
