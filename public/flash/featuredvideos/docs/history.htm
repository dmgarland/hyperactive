<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="de">
<head>
<title>AnimationPackage</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<link href="ap_style.css" rel="stylesheet" type="text/css"/>
<script type="text/JavaScript">
<!--
function MM_reloadPage(init) {  //reloads the window if Nav4 resized
  if (init==true) with (navigator) {if ((appName=="Netscape")&&(parseInt(appVersion)==4)) {
    document.MM_pgW=innerWidth; document.MM_pgH=innerHeight; onresize=MM_reloadPage; }}
  else if (innerWidth!=document.MM_pgW || innerHeight!=document.MM_pgH) location.reload();
}
MM_reloadPage(true);
//-->
</script>
</head>
<body>
<div id="logo">
	<p><a href="http://www.alex-uhlmann.de/flash/animationpackage/"><img src="images/logo_ap_framed.gif" alt="AnimationPackage" width="324" height="94" style="border:0"/></a></p>
</div>
<div id="navigation">
  <p class="button">v2.00</p>
  <p class="button"><a href="index.htm">index</a></p>
  <p class="button"><a href="readme.htm">readme</a></p>
  <p class="button"><a href="support.htm">support</a></p>
  <p class="button"><a href="history.htm">history</a></p>
  <p class="button"><a href="license.htm">terms of use</a></p>
  <p class="button"><a href="download.htm">download</a></p>  
<form action="https://www.paypal.com/cgi-bin/webscr" method="post">
<p><input type="hidden" name="cmd" value="_s-xclick" /></p>
<p><input type="image" src="https://www.paypal.com/en_US/i/btn/x-click-but21.gif" style="border:0" name="submit" alt="Make payments with PayPal - it's fast, free and secure!" /></p>
<p><input type="hidden" name="encrypted" value="-----BEGIN PKCS7-----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-----END PKCS7-----
" /></p>
</form>
  <p><a href="http://sourceforge.net"><img src="http://sourceforge.net/sflogo.php?group_id=116992&amp;type=1" width="88" height="31" alt="SourceForge.net Logo" style="border:0" /></a></p>
  <p><a href="http://validator.w3.org/check/referer"><img src="http://www.w3.org/Icons/valid-xhtml10" alt="Valid XHTML 1.0!" height="31" width="88" style="border:0" /></a></p>
  <p><a href="http://jigsaw.w3.org/css-validator/"><img src="http://jigsaw.w3.org/css-validator/images/vcss" alt="Valid CSS!" style="border:0;width:88px;height:31px" /></a></p>
  <p><a href="http://www.mtasc.org"><img src="http://www.mtasc.org/img/mtasc_88x31.gif" alt="Compiled with MTASC" style="border:0"/></a></p>
</div>
<div id="content"> 
  <p>&nbsp;</p>
  <p class="heading">New in 2.00:</p>
  <ul>
    <li>Added classes that leverage Flash Player 8 features.
        <ul>
          <li>Blur (Renamed previous Blur class to BlurDuplicate) </li>
          <li>Glow</li>
          <li>GlowGradient</li>
          <li>Bevel</li>
          <li>BevelGradient</li>
          <li>DropShadow</li>
        </ul>
    </li>
	<li>Minor bugfixes and improvements.</li>
  </ul>
  <p class="heading">New in 1.07:</p>
  <ul>
    <li>AnimationPackage now by default stops instances, which animate on the same property/method and object. More information on AnimationCore.setOverwriteModes class documentation. </li>
    <li>Every IAnimatable instance can specifiy it's own tween engine. More information on readme &gt; Tween-Engine and AnimationCore and all IAnimatable class documentations.</li>
    <li>Drawer.drawBy and Drawer.animateBy allow for more optimised ways to draw arbitrary shapes. Check out 
	<span class="link"><a href="http://www.flash-creations.com/notes/sample_svgtoflash.php">Helen Triolo's usage of Drawer</a></span> to animate an SVG file at runtime.</li>
    <li>MoveOnQuadCurve.orientOnPath.</li>
    <li>Full compatibility with <span class="link"><a href="http://www.mtasc.org">Motion-Twin ActionScript 2 Compiler</a></span>.</li>
    <li>Compatibility with <span class="link"><a href="http://www.powerflasher.com">Powerflasher's</a></span> <span class="link"><a href="http://fdt.powerflasher.com">FDT</a></span></li>
    <li>Ships with  an SWC component for an easy Macromedia Flex deployment.</li>
    <li>Bugfixes in Animation.</li>
    <li>Minor bugfixes and improvements.</li>
  </ul>
  <p class="heading">New in 1.06:</p>
  <ul>
    <li>New version of <span class="link"><a href="http://www.dembicki.org/" >Ivan Dembicki's</a></span> <span class="link"><a href="http://www.dembicki.org/Path.as" >Path</a></span> class used by AnimationPackage's MoveOnPath.</li>
    <li>Rotation.setRegistrationPoint. Adapted from solutions of <span class="link"><a href="http://www.robertpenner.com/" >Robert Penner</a></span>, <span class="link"><a href="http://www.darronschall.com/" >Darron Schall</a></span> and <span class="link"><a href="http://incomumdesign.com/" >Ben Jackson</a></span>.</li>
    <li><span class="link"><a href="http://www.mtasc.org">MTASC 1.07</a></span> compatible.</li>
    <li>Minor bugfixes and improvements.</li>
  </ul>
  <p class="heading">New in 1.05:</p>
  <ul>
    <li>All IAnimatable classes offer a getCurrentPercentage method. You can fully control any IAnimable animation (including composite animations like Sequence, Parallel, Animation, Drawer) at anytime. You can i.e. step forward and step backward with the goto and getCurrentPercentage method. See <span class="link"><a href="readme.htm#controlling">example</a></span>.</li>
    <li>Composite classes (Sequence, Parallel, Animation, Drawer) and Pause are compatible to IAnimatable and therefore implement new functionality.</li>
    <li>Scale.setRegistrationPoint emulates setting the registration point of a movielcip(s) allowing a different scaling. Thanks to <span class="link"><a href="http://incomumdesign.com/" >Ben Jackson</a></span> for the idea and  first implementations.</li>
    <li>All IAnimatable classes implement the setOptimizationMode method that; if set to true, offers performance benefits with extracting values that don't animate and possibly stopping the animation if all start values match the targeted end values. Defaults to false.</li>
    <li>AnimationPackage's drawing API behaves more similar to Macromedia's drawing API.</li>
    <li>if you want to animate many animation targets (i.e. movieclips or objects) the same way, many animation classes accept an array of animation targets instead of one animation target. This can lead to  a tremendous speed improvement. See for yourself. The Scale class's examples <span class="link"><a href="de/alex_uhlmann/animationpackage/animation/Scale_single.html">no. 8</a></span> and <span class="link"><a href="de/alex_uhlmann/animationpackage/animation/Scale_multi.html">no. 9</a></span>, based on <span class="link"><a href="http://laco.wz.cz/tween/?page=benchmark">Ladislav Zigo's benchmark</a></span> illustrate the speed difference. The new Animator class offers   the properties multiStart and multiSetter, considering different start value(s) of animation targets or not. See the Scale class's examples. For example <span class="link"><a href="de/alex_uhlmann/animationpackage/animation/Scale_run_04.html">no. 7</a></span>.</li>
    <li>The new Timeline class offers a deeper integration with AnimationPackage and movieclip timeline(s). Besides animating existing movieclip timeline(s), you can also control movieclip timeline(s) and let them play by itself. See <span class="link"><a href="de/alex_uhlmann/animationpackage/animation/Timeline_doc.html">Timline's class documentation</a></span> for examples. </li>
    <li>All classes including composite classes (Sequence, Parallel, Animation, MoveOnPath, Drawer and ShapeComposite) support being used over the Visitor  design pattern. See accept method of the specific class for more details. More documentation on this coming soon.</li>
    <li>almost compatibility with <span class="link"><a href="http://www.mtasc.org">Motion-Twin ActionScript 2 Compiler</a></span>.</li>
    <li>faster <span class="link"><a href="de/alex_uhlmann/animationpackage/animation/MoveOnCurve_01.html"> Curve.animate</a></span>. Thanks to <span class="link"><a href="http://www.sunrise-pictures.de/">Felix Eckhardt</a></span> and <span class="link"><a href="http://www.agilitynerd.com/">Steve Schwarz</a></span> for the idea and first implementations.</li>
    <li>faster SuperShape.animate, SuperShape.morph and SuperShape.animateProp. </li>
    <li>MoveOnCurve and MoveOnCurbicCurve have an orientToPath and <span class="link"><a href="de/alex_uhlmann/animationpackage/animation/MoveOnCurve_02.html">orientOnPath</a></span> method. Thanks to <span class="link"><a href="http://www.agilitynerd.com/">Steve Schwarz</a></span> again.</li>
    <li>Animation is more precise.</li>
    <li>MaskMoveFX and MaskScaleFX create a rectangle as a mask if no mask movieclip is specified. Thanks to <span class="link"><a href="http://incomumdesign.com/" >Ben Jackson</a></span> for the idea and first implementation.</li>
    <li>documented de.alex_uhlmann.animationpackage.utility.BezierToolkit, de.alex_uhlmann.animationpackage.utility.ColorFX and de.alex_uhlmann.animationpackage.utility.ColorToolkit classes.</li>
    <li>Text.addText, Text.clearText.</li>
    <li>slight overall performance increase for animations. </li>
    <li>revised documentation.</li>
    <li>Minor bugfixes and improvements.</li>
  </ul>
  <p class="heading">New in 1.04:</p>
  <ul>
    <li>Support for <span class="link"><a href="http://www.macromedia.com/software/flex/">Macromedia Flex</a></span>. See <span class="link"><a href="readme.htm#flex">Flex support</a> for more information. </span></li>
    <li>All animation classes offer a goto method that allow to jump to a specific step of the animation without animating.</li>
    <li>The Animator class offers an animate method with  start and end percentage values.</li>
    <li>The enhanced MoveOnPath class offers an orientOnPath method and uses a new verion of Ivan Dembicki's com.sharedfonts.Path class that makes it faster and more precise.</li>
    <li>Uses a new version of Grant Skinner's GDispatcher.</li>
    <li>Nested instances of Sequence  can also be paused, stopped and resumed.</li>
    <li>Only in version 1.03 the method setRegistrationPoint didn't always work as it should. This bug is fixed in 1.04.</li>
  </ul>
  <p class="heading">New in 1.03:</p>
  <ul>
    <li>The Drawer class allows to draw and animate arbitrary shapes/lines and treat the outline and fill seperatly.</li>
    <li>The new Animator class is more precise, faster and more flexible. Multiple animated values can be send to one method.</li>
    <li>You can send additional parameters to easing equations. See <span class="link"><a href="readme.htm#custom_ease">Customizable easing equations</a></span> in readme. </li>
    <li>All drawing classes offer a drawBy and some an animateBy method that allows to continue shapes/lines drawn with AnimationPackage. This methods open up the whole drawing package. In combination with the additions to Animator it allows you to arbitrary manipulate properties of shapes/lines drawn with AnimationPackage. Take a look at the class documentation of Animator for examples.</li>
    <li>The new ColorTransform class offers support for a transformObject like the one returned by build-in Color.getTransform(). This allows more complex color manipulations than via the RGB value and one transformation percentage value.</li>
    <li>Flash does not guaranteed that time-based tweening will reach the end value(s) of your animation. By default AnimationPackage guarantees that the end value(s) will be reached. The new forceEnd method of most classes that use animations allows you to disable this guarantee and only accept the values from your easing equation. In certain situations this can lead to a smoother ending of the animation. Notice that in frame-based tweening the end value(s) will always be reached.</li>
    <li>All animation classes and the AnimationCore class offer a setOptimizationMode/setOptimizationModes method that can add additional performance with removing parts of the animation which are not animated during the animation.</li>
    <li>Line, DashLine, QuadCurve and CubicCurve offer getter/setter methods to access points. (getX1(), getY1()...etc.).</li>
    <li>Line, DashLine, QuadCurve and CubicCurve offer a getPenPosition/setPenPosition method to control the drawing API pen position.</li>
    <li>Text.updateText().</li>
    <li>better documentation for ActionScript 2.0 beginners.</li>
  </ul>
  <p class="heading">New in 1.02:</p>
  <ul>
    <li>Sequence.setAnimateMode() and Sequence.setEasingMode() allows to treat child animations as a whole. It allocates the start/end percentage values and/or the easing equation along the whole Sequence. Usefull for animating motion paths via Move, MoveOnQuadCurve and  MoveOnCubicCurve.</li>
    <li>Sequence.getChild, Sequence.getChildDuration.</li>
    <li>MoveOnPath allows to animate an object evenly along a path using Ivan Dembicki's com.sharedfonts.Path. This class emulates motion path tweening from the Flash IDE.</li>
    <li>The Animation class combines Sequence and Parallel to allow overlaps of child animations.</li>
    <li>animation classes offer opportunities to set the starting value(s) and end value(s) either via the new setStartValue, setStartValues, setEndValue, setEndValues methods, the run method or the constructor.</li>
    <li>Timeline allows to animate existing movieclip timelines.</li>
    <li>MoveOnCubicCurve</li>
    <li>CubicCurve</li>
    <li>The MoveOnCurve class animates an object along a bezier curve with n control points. Usefull for long paths. </li>
    <li>The Curve class draws a bezier curve with n control points. </li>
    <li>Move.orientToPath and MoveOnQuadCurve.orientToPath  can rotate the object towards the line/curve while animating. </li>
    <li>QuadCurve, CubicCurve, MoveOnQuadCurve and MoveOnCubicCurve offer ways to specify control points between the start and end points of the curve instead of points on the curve. (useControlPoints method or via parameters) </li>
    <li>Volume allows to fade sounds with easing equations. ( :</li>
    <li>SingleAnimator allows to animate a single property or method in a more intuitve way than via Animator.</li>
    <li>Animator has stop, pause and resume methods. </li>
    <li>Trail can attach a trail for infinite length and can remove it explicitly. And it's faster.</li>
    <li>Almost all classes that use animations increased in performance because of a faster Animator class.</li>
    <li>All classes offer a getID method that returns a unique identifier of the instance. Useful for associative arrays.</li>
    <li>All drawing classes offer a clear method to remove all drawings drawn from the instance. </li>
    <li>revised documentation.</li>
  </ul>
  <p class="heading">New in 1.01:</p>
  <ul>
    <li>animation classes offer new methods to control animations:
      <ul>
        <li>getStartValue</li>
        <li>getStartValues</li>
        <li>getEndValue</li>
        <li>getEndValues</li>
        <li>getCurrentValue</li>
        <li>getCurrentValues</li>
        <li>getDurationElapsed</li>
        <li>getDurationRemaining</li>
      </ul>
    </li>
    <li>animation classes support a 


 roundResult method, which rounds animation results to integers. (usefull for animating pixelfonts).</li>
    <li>Scale.scaleWithPixels allows to scale over _with and _height properties of MovieClip. </li>
    <li>APCore.setContainerMC allows to specify a custom timeline (default is root) for the container movieclip of AnimationPackage.</li>
    <li>drawing classes offer a gradientStyle method.</li>
    <li>drawing classes support customization of the registration point.</li>
    <li>RoundRectangle.setCornerRadii allows to set a corner radius for all corners individually.</li>
  </ul>
  <p class="heading">New in 1.00:</p>
  <ul>
    <li>frame-based tweening based on Andr&eacute; Michelle's 


 ImpulsDispatcher and 


 FrameBasedInterval.</li>
    <li> AnimationCore.setTweenMode allows to change the tween-engine at runtime. (time-based, setInterval and frame-based, onEnterFrame). </li>
    <li>AnimationCore.setDurationMode allows to control frame-based animations with milliseconds.</li>
    <li>AnimationCore.pauseAll.</li>
    <li> AnimationCore.resumeAll.</li>
    <li>All classes that use animations offer an isTweening() method. </li>
    <li> APCore.watchFPS.</li>
    <li> APCore.unwatchFPS.</li>
    <li> APCore.getFPS.</li>
    <li> APCore.setFPS.</li>
    <li> APCore.milliseconds2frames.</li>
    <li>myBlink.blinkFast.</li>
  </ul>
  <p class="heading">New in 0.956 BETA:</p>
  <ul>
    <li>AnimationCore class holds animationStyle() properties. </li>
    <li>All classes that use animations offer stop, pause, resume, lock and unlock methods. </li>
  </ul>
  <p class="heading">New in 0.955 BETA:</p>
  <ul>
    <li>faster SuperShape.</li>
  </ul>
  <p class="heading">New in 0.954 BETA:</p>
  <ul>
    <li>com.gskinner.events.GDispatcher or mx.events.EventDispatcher support.</li>
    <li>using internal AsBroadcaster.</li>
    <li>added documentation.</li>
    <li>added example .swf's.</li>
  </ul>
  <p class="heading">New in 0.953 BETA:</p>
  <ul>
    <li>SuperShape.morph().</li>
    <li>SuperShape.animateProps().</li>
    <li>All drawing classes support a movieclip as first parameter to define the timeline where to draw the shape in.</li>
    <li>Parallel class.</li>
    <li>Sequence class.</li>
    <li>Many animation classes support an animate() method with percentage start and end parameters.</li>
    <li>Optional constructor parameters for more flexibility how to use AnimationPackage.</li>
    <li>Improvements to MaskMoveFX and MaskScaleFX classes. </li>
  </ul>
</div>
<div id="script">
  <p>creating powerful animations fast.</p>
</div>

</body>
</html>
