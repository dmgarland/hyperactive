The app uses ActiveRecord to keep track of sessions.


== Installation on Debian / Ubuntu ==

Install docs, for a stock Debian(ish) box. If you are running some other kind of Linux, 
the package names may be different but the basic process is the same.

Step 1: Install a Ruby interpreter

yossarian@pulp:~$ sudo apt-get install ruby rdoc1.8 ri1.8 irb1.8 irb ruby1.8-dev
The following extra packages will be installed:
  irb1.8 libreadline-ruby1.8 libruby1.8 ruby1.8

Step 2: Install build tools.  Ruby runs its own packages, called gems, which sometimes need 
to be compiled as they're written in C.

yossarian@pulp:~$ sudo apt-get install build-essential

Step 3: Install the gem package manager

a) Download the tarball:
yossarian@pulp:~$ wget http://rubyforge.org/frs/download.php/17190/rubygems-0.9.2.tgz

b) Extract it:
yossarian@pulp:~$ tar -xvzf rubygems-0.9.2.tgz 

c) Install it:
yossarian@pulp:~$ cd rubygems-0.9.2
yossarian@pulp:~/rubygems-0.9.2$ sudo ruby setup.rb
yossarian@pulp:~/rubygems-0.9.2$ cd   

Note: rubygems is a package manager for ruby code, and works sort of like apt-get.  
When installing gems in any of the steps below, if you are asked which version of a gem 
you'd like to install, just pick the one with the highest version number.  Also, accept 
any gem dependencies that the package manager asks you about.

Step 4: Install Rails
yossarian@pulp:~$ sudo gem install rails --include-dependencies

Step 5: Install a Ruby database adapter for your chosen database:

a) for postgresql:
yossarian@pulp:~$ sudo apt-get install libpgsql-ruby

OR

b) for mysql:
yossarian@pulp:~$ sudo apt-get install libmysql-ruby
yossarian@pulp:~$ sudo apt-get install libmysqlclient15 libmysqlclient15-dev

Note: the version numbers for libmysqlclient15 may be different, do an 
yossarian@pulp:~$ apt-cache search libmysqlclient
to figure out the package name if necessary

Step 6: Install the gem for your chosen database so that rails can talk to it

For Postgresql:
yossarian@pulp:~$ sudo gem install postgres-pr

For MySql:
yossarian@pulp:~$ sudo gem install mysql

Step 7: Install gems used by the calendar

a) "ferret" and "acts_as_ferret" provide full-text search indexing, similar to Apache Lucene:
yossarian@pulp:~$ sudo gem install ferret
yossarian@pulp:~$ sudo gem install acts_as_ferret


b) "ruby-debug" allows interactive debugging of Rails applications, which is pretty handy for development:
yossarian@pulp:~$ sudo gem install ruby-debug

c) "rmagick" acts as an interface to the imagemagick library, which can be used to resize uploaded images:
yossarian@pulp:~$ sudo apt-get install imagemagick
yossarian@pulp:~$ sudo apt-get install librmagick-ruby
yossarian@pulp:~$ sudo apt-get install libmagick6-dev
yossarian@pulp:~$ sudo gem install rmagick

Note:  the above package names are for Debian 3.1 (Sarge).  On newer Debians or Ubuntu the libmagickX-dev version number is likely to be higher, so you may need to install a different package.  To find out what you need, type:
yossarian@pulp:~$ apt-cache search libmagick
and pick the proper package, e.g. libmagick9-dev


d) The backgroundrb plugin in the calendar code allows us to fork off long-running processes, so it's good for stuff like Flash video encoding using ffmpeg.  We need these gems to support backgroundrb, and we might as well install ffmpeg here too:
yossarian@pulp:~$ sudo gem install daemons slave
yossarian@pulp:~$ sudo apt-get install ffmpeg

e) The vpim gem allows us to import and export iCal files:
yossarian@pulp:~$ sudo gem install vpim

Step 8:  Install subversion, the version control system:
yossarian@pulp:~$ sudo apt-get install subversion

Step 9:  Check out the calendar code from the subversion repository
yossarian@pulp:~$ svn co svn+ssh://yourusername@escapegoat.org/var/svn/imcalendar .
Note, don't forget the dot in the line above.  Also, because of the way subversion works you may be asked to enter your password more than once.

Step 10: Set up your databases
# Create calendar user (this will ask for a new password)
yossarian@pulp:~$ sudo -u postgres createuser -P calendar_user

# Create calendar db owned by that user
yossarian@pulp:~$ sudo -u postgres createdb -O calendar_user imcalendar_development
yossarian@pulp:~$ sudo -u postgres createdb -O calendar_user imcalendar_test

Note: we've created two databases here.  Rails is big on unit and functional testing, so the "_test" database is used for testing purposes.

Step 11: Create the initial database schema for the development database, and clone the structure into the test database
yossarian@pulp:~$ cd imcalendar
yossarian@pulp:~/imcalendar$ rake db:migrate 

Note: on Debian Sarge, this fails because the "ruby-debug" gem doesn't work with Ruby 1.8.2.  To fix this, comment out the requirements for ruby-debug in environment.rb, like this:
yossarian@pulp:~/imcalendar$ nano config/environment.rb 

Put hashes in front of the ruby-debug lines to comment them out, like this:
#require 'ruby-debug'
#Debugger.start

Then save the file using ctrl-x, and hit enter key twice.

Step 12:  Set up the mongrel webserver and start the site:
yossarian@pulp:~$ sudo gem install mongrel
yossarian@pulp:~$ cd imcalendar
yossarian@pulp:~$ script/server

This should get the server up and running.  You can hit the site now by going to http://yoursite.org:3000.  If you've got it running on your local machine, you can go to http://localhost:3000

A default admin user and password are set up.  You can log into the site by going to:

http://yoursite.org:3000/login

user: admin
password: password

Enjoy!


